{"version":3,"sources":["utils/getNewState.js","components/CheckboxTree/CheckboxTree.js","utils/normalize.js","components/Checkbox/Checkbox.js","components/Intro/Intro.js","assets/github.svg","App.js","fonts/source-sans-pro-v11-latin-regular.woff2","fonts/source-sans-pro-v11-latin-regular.woff","index.js","registerServiceWorker.js"],"names":["toggleNode","node","checked","toggleNodeAndChildren","nodes","id","newNodes","currentNode","childIds","length","forEach","childId","areChildrenChecked","reduce","acc","toggleParent","parentId","undefined","parentNode","shouldToggleParent","getNewState","List","styled","ul","CheckboxTree","data","useState","recursionKey","normalizedData","counter","transform","rest","push","childNode","normalize","setNodes","onToggle","prevNodes","StyledCheckbox","input","Checkbox","text","Fragment","type","onChange","map","Intro","href","Main","main","Section","section","Footer","footer","App","src","github","alt","GlobalStyle","createGlobalStyle","woff2","woff","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.a3810b40.chunk.js","sourcesContent":["const toggleNode = (node, checked) => ({ ...node, checked })\n\nconst toggleNodeAndChildren = (nodes, id, checked) => {\n  let newNodes = { ...nodes }\n  const currentNode = newNodes[id]\n  const { childIds } = currentNode\n\n  newNodes[id] = toggleNode(currentNode, checked)\n\n  if (childIds.length) {\n    childIds.forEach((childId) => {\n      newNodes = toggleNodeAndChildren(newNodes, childId, checked)\n    })\n  }\n\n  return newNodes\n}\n\nconst areChildrenChecked = (nodes, id) => {\n  const currentNode = nodes[id]\n  const { checked, childIds } = currentNode\n\n  return childIds.length\n    ? childIds.reduce(\n        (acc, childId) => acc && areChildrenChecked(nodes, childId),\n        true\n      )\n    : checked\n}\n\nconst toggleParent = (nodes, id) => {\n  const parentId = nodes[id].parentId\n\n  if (parentId === undefined) {\n    return nodes\n  }\n\n  let newNodes = { ...nodes }\n  const parentNode = newNodes[parentId]\n  const shouldToggleParent = areChildrenChecked(newNodes, parentId)\n\n  if (parentNode.checked !== shouldToggleParent) {\n    newNodes[parentId] = toggleNode(parentNode, shouldToggleParent)\n  }\n\n  return toggleParent(newNodes, parentId)\n}\n\nexport const getNewState = (nodes, id) => {\n  let newNodes\n\n  newNodes = toggleNodeAndChildren(nodes, id, !nodes[id].checked)\n  newNodes = toggleParent(newNodes, id)\n\n  return newNodes\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Checkbox } from '..'\nimport { normalize, getNewState } from '../../utils'\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n`\n\nexport const CheckboxTree = ({ data }) => {\n  const [nodes, setNodes] = useState(normalize(data))\n\n  const toggleCheckbox = (id) => {\n    setNodes((prevNodes) => getNewState(prevNodes, id))\n  }\n\n  return (\n    <List>\n      <Checkbox id={0} nodes={nodes} onToggle={toggleCheckbox} />\n    </List>\n  )\n}\n","export const normalize = (data, recursionKey = 'children') => {\n  let normalizedData = {}\n  let counter = -1\n\n  const transform = ({ node, parentId }) => {\n    counter += 1\n    const id = counter\n    const { [recursionKey]: exclude, ...rest } = node\n    normalizedData[id] = {\n      ...rest,\n      parentId,\n      childIds: []\n    }\n    if (parentId >= 0) {\n      normalizedData[parentId].childIds.push(id)\n    }\n    if (node[recursionKey] && node[recursionKey].length) {\n      node[recursionKey].forEach((childNode) => {\n        transform({ node: childNode, parentId: id })\n      })\n    }\n  }\n\n  transform({ node: data })\n  return normalizedData\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst List = styled.ul`\n  list-style-type: none;\n`\n\nconst StyledCheckbox = styled.input`\n  margin-right: 0.5rem;\n  cursor: pointer;\n`\n\nexport const Checkbox = ({ id, nodes, onToggle }) => {\n  const node = nodes[id]\n  const { text, childIds, checked } = node\n\n  const handleChange = () => onToggle(id)\n\n  return (\n    <React.Fragment key={id}>\n      {text && (\n        <li>\n          <label>\n            <StyledCheckbox\n              type='checkbox'\n              checked={checked}\n              onChange={handleChange}\n            />\n            {text}\n          </label>\n        </li>\n      )}\n      {childIds.length ? (\n        <li>\n          <List>\n            {childIds.map((childId) => (\n              <Checkbox\n                key={childId}\n                id={childId}\n                nodes={nodes}\n                onToggle={onToggle}\n              />\n            ))}\n          </List>\n        </li>\n      ) : null}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\n\nexport const Intro = () => (\n  <>\n    <h1>React Checkbox Tree</h1>\n    <p>\n      A react app showcasing a simple checkbox tree component. This project was\n      created using{' '}\n      <a href='https://github.com/facebookincubator/create-react-app'>\n        create-react-app\n      </a>\n      .\n    </p>\n  </>\n)\n","export default __webpack_public_path__ + \"static/media/github.66378707.svg\";","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Intro, CheckboxTree } from './components'\nimport data from './data/data.json'\nimport github from './assets/github.svg'\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  max-width: 64rem;\n  height: 100vh;\n  margin: 0 auto;\n`\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: auto;\n`\n\nconst Footer = styled.footer`\n  align-self: center;\n  margin: 2rem;\n`\n\nexport const App = () => (\n  <Main>\n    <header>\n      <Intro />\n    </header>\n    <Section>\n      <article>\n        <CheckboxTree data={data} />\n      </article>\n    </Section>\n    <Footer>\n      <a href='https://github.com/joelgeorgev/react-checkbox-tree'>\n        <img src={github} alt='Go to GitHub repository page' />\n      </a>\n    </Footer>\n  </Main>\n)\n","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.96b15882.woff2\";","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.74ddb2b0.woff\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { App } from './App'\nimport woff2 from './fonts/source-sans-pro-v11-latin-regular.woff2'\nimport woff from './fonts/source-sans-pro-v11-latin-regular.woff'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Source Sans Pro', sans-serif;\n    overscroll-behavior-y: none;\n  }\n\n  /* source-sans-pro-regular - latin */\n  @font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    font-display: optional;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'),\n        url(${woff2}) format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n        url(${woff}) format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  }\n`\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}