{"version":3,"sources":["assets/github.svg","fonts/source-sans-pro-v11-latin-regular.woff2","fonts/source-sans-pro-v11-latin-regular.woff","utils/normalize.js","components/CheckboxTree/CheckboxTree.js","utils/getNewState.js","components/Checkbox/Checkbox.js","components/Intro/Intro.js","App.js","index.js","registerServiceWorker.js"],"names":["module","exports","normalize","data","recursionKey","normalizedData","counter","transform","node","parentId","id","rest","childIds","push","length","forEach","childNode","List","styled","ul","CheckboxTree","useState","nodes","setNodes","onToggle","prevNodes","state","toggleNode","checked","toggleSelfandChildren","childId","toggleParent","parentNode","shouldToggleParent","areChildrenChecked","reduce","checkedAcc","getNewState","StyledCheckbox","input","Checkbox","text","Fragment","key","type","onChange","map","Intro","href","Section","section","Wrapper","div","Footer","GlobalStyle","createGlobalStyle","woff2","woff","ReactDOM","render","role","src","github","alt","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.a1ba2e7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.dc6635a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.76d8cbb0.woff2\";","module.exports = __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.f94f84eb.woff\";","export const normalize = ({ data, recursionKey = 'children' }) => {\n  let normalizedData = {}\n  let counter = -1\n\n  const transform = ({ node, parentId }) => {\n    counter += 1\n    const id = counter\n    const { [recursionKey]: exclude, ...rest } = node\n    normalizedData[id] = {\n      ...rest,\n      parentId,\n      childIds: []\n    }\n    if (parentId >= 0) {\n      normalizedData[parentId].childIds.push(id)\n    }\n    if (node[recursionKey] && node[recursionKey].length) {\n      node[recursionKey].forEach((childNode) => {\n        transform({ node: childNode, parentId: id })\n      })\n    }\n  }\n\n  transform({ node: data })\n  return normalizedData\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Checkbox } from '..'\nimport { normalize, getNewState } from '../../utils'\n\nconst List = styled.ul`\n  list-style-type: none;\n`\n\nexport const CheckboxTree = ({ data }) => {\n  const [nodes, setNodes] = useState(normalize({ data }))\n\n  const toggleCheckbox = (id) => {\n    setNodes((prevNodes) => getNewState({ id, state: prevNodes }))\n  }\n\n  return (\n    <List>\n      <Checkbox id={0} nodes={nodes} onToggle={toggleCheckbox} />\n    </List>\n  )\n}\n","export const getNewState = ({ id, state }) => {\n  const toggleNode = ({ node, checked }) => ({ ...node, checked })\n\n  const toggleSelfandChildren = ({ id, nodes, checked }) => {\n    const node = nodes[id]\n    const { childIds } = node\n\n    nodes[id] = toggleNode({ node: nodes[id], checked })\n    if (childIds.length) {\n      childIds.forEach((childId) => {\n        toggleSelfandChildren({ id: childId, nodes, checked })\n      })\n    }\n  }\n\n  const toggleParent = ({ id, nodes }) => {\n    const areChildrenChecked = ({ id, nodes }) => {\n      const node = nodes[id]\n      const { childIds } = node\n\n      return childIds.length\n        ? childIds.reduce(\n            (checkedAcc, childId) =>\n              checkedAcc && areChildrenChecked({ id: childId, nodes }),\n            true\n          )\n        : node.checked\n    }\n\n    const parentId = nodes[id].parentId\n    if (!(parentId >= 0)) {\n      return\n    }\n    const parentNode = nodes[parentId]\n    const shouldToggleParent = areChildrenChecked({ id: parentId, nodes })\n    if (parentNode.checked !== shouldToggleParent) {\n      nodes[parentId] = toggleNode({\n        node: nodes[parentId],\n        checked: shouldToggleParent\n      })\n    }\n    toggleParent({ id: parentId, nodes })\n  }\n\n  const nodes = { ...state }\n  toggleSelfandChildren({ id, nodes, checked: !nodes[id].checked })\n  toggleParent({ id, nodes })\n  return nodes\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst List = styled.ul`\n  list-style-type: none;\n`\n\nconst StyledCheckbox = styled.input`\n  margin-right: 0.5rem;\n  cursor: pointer;\n`\n\nexport const Checkbox = ({ id, nodes, onToggle }) => {\n  const node = nodes[id]\n  const { text, childIds, checked } = node\n\n  const handleChange = () => onToggle(id)\n\n  return (\n    <React.Fragment key={id}>\n      {text && (\n        <li>\n          <label>\n            <StyledCheckbox\n              type='checkbox'\n              checked={checked}\n              onChange={handleChange}\n            />\n            {text}\n          </label>\n        </li>\n      )}\n      {childIds.length ? (\n        <li>\n          <List>\n            {childIds.map((childId) => (\n              <Checkbox\n                key={childId}\n                id={childId}\n                nodes={nodes}\n                onToggle={onToggle}\n              />\n            ))}\n          </List>\n        </li>\n      ) : null}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\n\nexport const Intro = () => (\n  <div>\n    <h3>React Checkbox Tree</h3>\n    <p>\n      A react app showcasing a simple checkbox tree component. This project was\n      created using{' '}\n      <a href='https://github.com/facebookincubator/create-react-app'>\n        create-react-app\n      </a>\n      .\n    </p>\n  </div>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Intro, CheckboxTree } from './components'\nimport data from './data/data.json'\nimport github from './assets/github.svg'\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  max-width: 64rem;\n  height: 100vh;\n  margin: 0 auto;\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  margin-top: 2rem;\n  overflow: auto;\n`\n\nconst Footer = styled.div`\n  align-self: center;\n  margin: 2rem;\n`\n\nexport const App = () => (\n  <main role='main'>\n    <Section>\n      <Wrapper>\n        <Intro />\n        <CheckboxTree data={data} />\n      </Wrapper>\n      <Footer>\n        <a href='https://github.com/joelgeorgev/react-checkbox-tree'>\n          <img src={github} alt='GitHub' />\n        </a>\n      </Footer>\n    </Section>\n  </main>\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { App } from './App'\nimport woff2 from './fonts/source-sans-pro-v11-latin-regular.woff2'\nimport woff from './fonts/source-sans-pro-v11-latin-regular.woff'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Source Sans Pro', sans-serif;\n    overscroll-behavior-y: none;\n  }\n\n  /* source-sans-pro-regular - latin */\n  @font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    font-display: optional;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'),\n        url(${woff2}) format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n        url(${woff}) format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  }\n`\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}