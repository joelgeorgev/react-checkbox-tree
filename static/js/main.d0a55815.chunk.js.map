{"version":3,"sources":["assets/github.svg","fonts/source-sans-pro-v11-latin-regular.woff2","fonts/source-sans-pro-v11-latin-regular.woff","components/checkbox.js","utils/normalize.js","components/checkbox-tree.js","utils/getNewState.js","components/intro.js","App.js","index.js","registerServiceWorker.js"],"names":["module","exports","__webpack_require__","p","List","styled","ul","_templateObject","StyledCheckbox","input","_templateObject2","Checkbox","_ref","id","nodes","onToggle","node","key","childIds","checked","react_default","a","createElement","Fragment","type","onChange","length","map","childId","checkbox_tree_templateObject","CheckboxTree","_useState","useState","_ref$list","list","_ref$recursionKey","recursionKey","normalizedData","counter","transform","_ref2","parentId","rest","Object","objectWithoutProperties","_toPropertyKey","objectSpread","push","forEach","childNode","defineProperty","normalize","data","_useState2","slicedToArray","setNodes","checkbox_tree_List","checkbox_Checkbox","prevNodes","prevState","toggleNode","newState","keys","value","clone","toggleSelfandChildren","_ref3","toggleParent","_ref4","parentNode","areChildrenChecked","isNodeChecked","_ref5","reduce","checkedAcc","getNewState","Intro","href","Section","section","App_templateObject","Wrapper","div","App_templateObject2","Footer","_templateObject3","GlobalStyle","createGlobalStyle","src_templateObject","woff2","woff","ReactDOM","render","role","intro_Intro","checkbox_tree_CheckboxTree","src","github","alt","document","getElementById","navigator","window","addEventListener","swUrl","concat","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.d0a55815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.dc6635a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.76d8cbb0.woff2\";","module.exports = __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.f94f84eb.woff\";","import React from 'react'\nimport styled from 'styled-components'\n\nconst List = styled.ul`\n  list-style-type: none;\n`\n\nconst StyledCheckbox = styled.input`\n  margin-right: 0.5rem;\n  cursor: pointer;\n`\n\nexport const Checkbox = ({ id, nodes, onToggle }) => {\n  const node = nodes[id]\n  const { key, childIds, checked } = node\n\n  const handleChange = () => onToggle(id)\n\n  return (\n    <React.Fragment key={id}>\n      {key && (\n        <li>\n          <label>\n            <StyledCheckbox\n              type='checkbox'\n              checked={checked}\n              onChange={handleChange}\n            />\n            {key}\n          </label>\n        </li>\n      )}\n      {childIds.length ? (\n        <li>\n          <List>\n            {childIds.map((childId) => (\n              <Checkbox\n                key={childId}\n                id={childId}\n                nodes={nodes}\n                onToggle={onToggle}\n              />\n            ))}\n          </List>\n        </li>\n      ) : null}\n    </React.Fragment>\n  )\n}\n","export const normalize = ({ list = [], recursionKey = 'children' }) => {\n  let normalizedData = {}\n  let counter = -1\n\n  const transform = ({ node, parentId }) => {\n    counter += 1\n    const id = counter\n    const { [recursionKey]: unused, ...rest } = node\n    normalizedData[id] = {\n      ...rest,\n      parentId,\n      childIds: []\n    }\n    if (parentId >= 0) {\n      normalizedData[parentId].childIds.push(id)\n    }\n    if (node[recursionKey] && node[recursionKey].length) {\n      node[recursionKey].forEach((childNode) => {\n        transform({ node: childNode, parentId: id })\n      })\n    }\n  }\n\n  transform({ node: { [recursionKey]: list } })\n  return normalizedData\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Checkbox } from '.'\nimport { normalize, getNewState } from '../utils'\nimport data from '../data/data.json'\n\nconst List = styled.ul`\n  list-style-type: none;\n`\n\nexport const CheckboxTree = () => {\n  const [nodes, setNodes] = useState(\n    normalize({ list: data, recursionKey: 'childKeys' })\n  )\n\n  const toggleCheckbox = (id) => {\n    setNodes((prevNodes) => getNewState({ id, prevState: prevNodes }))\n  }\n\n  return (\n    <List>\n      <Checkbox id={0} nodes={nodes} onToggle={toggleCheckbox} />\n    </List>\n  )\n}\n","export const getNewState = ({ id, prevState }) => {\n  const clone = (prevState) => {\n    let newState = {}\n\n    Object.keys(prevState).forEach((value) => {\n      newState[value] = { ...prevState[value] }\n    })\n    return newState\n  }\n\n  const toggleNode = ({ node, checked }) => {\n    node.checked = checked\n  }\n\n  const toggleSelfandChildren = ({ id, nodes, checked }) => {\n    const node = nodes[id]\n    const { childIds } = node\n\n    toggleNode({ node, checked })\n    if (childIds.length) {\n      childIds.forEach((childId) => {\n        toggleSelfandChildren({ id: childId, nodes, checked })\n      })\n    }\n  }\n\n  const toggleParent = ({ id, nodes }) => {\n    const isNodeChecked = ({ id, nodes }) => {\n      const node = nodes[id]\n      const { childIds } = node\n\n      return childIds.length\n        ? childIds.reduce(\n            (checkedAcc, childId) =>\n              checkedAcc && isNodeChecked({ id: childId, nodes }),\n            true\n          )\n        : node.checked\n    }\n\n    const parentId = nodes[id].parentId\n    const parentNode = nodes[parentId]\n    const areChildrenChecked = isNodeChecked({ id: parentId, nodes })\n\n    toggleNode({ node: parentNode, checked: areChildrenChecked })\n    if (parentNode.parentId >= 0) {\n      toggleParent({ id: parentId, nodes })\n    }\n  }\n\n  const nodes = clone(prevState)\n  toggleSelfandChildren({ id, nodes, checked: !nodes[id].checked })\n  toggleParent({ id, nodes })\n  return nodes\n}\n","import React from 'react'\n\nexport const Intro = () => (\n  <div>\n    <h3>React Checkbox Tree</h3>\n    <p>\n      A react app showcasing a simple checkbox tree component. This project was\n      created using{' '}\n      <a href='https://github.com/facebookincubator/create-react-app'>\n        create-react-app\n      </a>\n      .\n    </p>\n  </div>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Intro, CheckboxTree } from './components'\nimport github from './assets/github.svg'\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  max-width: 64rem;\n  height: 100vh;\n  margin: 0 auto;\n  padding: 4rem 0;\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n`\n\nconst Footer = styled.div`\n  align-self: center;\n`\n\nexport const App = () => (\n  <main role='main'>\n    <Section>\n      <Wrapper>\n        <Intro />\n        <CheckboxTree />\n      </Wrapper>\n      <Footer>\n        <a href='https://github.com/joelgeorgev/react-checkbox-tree'>\n          <img src={github} alt='GitHub' />\n        </a>\n      </Footer>\n    </Section>\n  </main>\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { App } from './App'\nimport woff2 from './fonts/source-sans-pro-v11-latin-regular.woff2'\nimport woff from './fonts/source-sans-pro-v11-latin-regular.woff'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Source Sans Pro', sans-serif;\n  }\n\n  /* source-sans-pro-regular - latin */\n  @font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    font-display: optional;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'),\n        url(${woff2}) format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n        url(${woff}) format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  }\n`\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}