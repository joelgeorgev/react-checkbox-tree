{"version":3,"sources":["assets/github.svg","components/Checkbox.js","components/util/normalize.js","components/util/getNewState.js","components/CheckboxTree.js","components/Intro.js","App.js","index.js","registerServiceWorker.js"],"names":["module","exports","__webpack_require__","p","Checkbox","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleChange","_this$props","props","id","onToggle","inherits","createClass","key","value","_this$props2","nodes","node","childIds","checked","react_default","a","createElement","Fragment","type","className","onChange","map","childId","React","PureComponent","normalize","_ref","_ref$list","list","_ref$recursionKey","recursionKey","normalizedData","counter","transform","_ref2","parentId","rest","objectWithoutProperties","_toPropertyKey","objectSpread","push","forEach","childNode","defineProperty","getNewState","prevState","toggleNode","newState","keys","clone","toggleSelfandChildren","_ref3","toggleParent","_ref4","parentNode","areChildrenChecked","isNodeChecked","_ref5","reduce","checkedAcc","CheckboxTree","toggleCheckbox","setState","state","data","Checkbox_Checkbox","Intro","href","App","Intro_Intro","CheckboxTree_CheckboxTree","src","github","alt","ReactDOM","render","App_App","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.62e05e02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.dc6635a4.svg\";","import React from 'react'\n\nexport class Checkbox extends React.PureComponent {\n\n  handleChange = () => {\n    const { id, onToggle } = this.props\n    onToggle(id)\n  }\n\n  render() {\n    const { id, nodes, onToggle } = this.props\n    const node = nodes[id]\n    const { key, childIds, checked } = node\n\n    return (\n      <React.Fragment key={id}>\n        {key &&\n          <li>\n            <input type='checkbox' checked={checked} className='pointer'\n              onChange={this.handleChange} />\n            <label className='ml2'>{key}</label>\n          </li>}\n        {childIds.length ?\n          (<ul className='list'>\n            {childIds.map((childId) => {\n              return (<Checkbox key={childId} id={childId}\n                nodes={nodes} onToggle={onToggle} />)\n            })}\n          </ul>)\n          :\n          null}\n      </React.Fragment>\n    )\n  }\n}","export const normalize = ({ list = [], recursionKey = 'children' }) => {\n\n  let normalizedData = {}\n  let counter = -1\n\n  const transform = ({ node, parentId }) => {\n    counter += 1\n    const id = counter\n    const { [recursionKey]: unused, ...rest } = node\n    normalizedData[id] = {\n      ...rest,\n      parentId,\n      childIds: []\n    }\n    if (parentId >= 0) {\n      normalizedData[parentId].childIds.push(id)\n    }\n    if (node[recursionKey] && node[recursionKey].length) {\n      node[recursionKey].forEach((childNode) => {\n        transform({ node: childNode, parentId: id })\n      })\n    }\n  }\n\n  transform({ node: { [recursionKey]: list } })\n  return normalizedData\n}","export const getNewState = ({ id, prevState }) => {\n\n  const clone = (prevState) => {\n    let newState = {}\n\n    Object.keys(prevState).forEach((value) => {\n      newState[value] = { ...prevState[value] }\n    })\n    return newState\n  }\n\n  const toggleNode = ({ node, checked }) => {\n    node.checked = checked\n  }\n\n  const toggleSelfandChildren = ({ id, nodes, checked }) => {\n    const node = nodes[id]\n    const { childIds } = node\n\n    toggleNode({ node, checked })\n    if (childIds.length) {\n      childIds.forEach((childId) => {\n        toggleSelfandChildren({ id: childId, nodes, checked })\n      })\n    }\n  }\n\n  const toggleParent = ({ id, nodes }) => {\n\n    const isNodeChecked = ({ id, nodes }) => {\n      const node = nodes[id]\n      const { childIds } = node\n\n      return childIds.length ?\n        (childIds.reduce((checkedAcc, childId) => {\n          return checkedAcc && isNodeChecked({ id: childId, nodes })\n        }, true))\n        :\n        node.checked\n    }\n\n    const parentId = nodes[id].parentId\n    const parentNode = nodes[parentId]\n    const areChildrenChecked = isNodeChecked({ id: parentId, nodes })\n\n    toggleNode({ node: parentNode, checked: areChildrenChecked })\n    if (parentNode.parentId >= 0) {\n      toggleParent({ id: parentId, nodes })\n    }\n  }\n\n  const nodes = clone(prevState)\n  toggleSelfandChildren({ id, nodes, checked: !nodes[id].checked })\n  toggleParent({ id, nodes })\n  return nodes\n}","import React from 'react'\n\nimport { Checkbox } from '.'\nimport { normalize, getNewState } from './util'\nimport data from '../data/data.json'\n\nexport class CheckboxTree extends React.PureComponent {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      nodes: normalize({ list: data, recursionKey: 'childKeys' })\n    }\n  }\n\n  toggleCheckbox = (id) => {\n    this.setState((prevState) => {\n      return {\n        nodes: getNewState({ id, prevState: prevState.nodes })\n      }\n    })\n  }\n\n  render() {\n    const { nodes } = this.state\n    return (\n      <Checkbox id={0} nodes={nodes} onToggle={this.toggleCheckbox} />\n    )\n  }\n}","import React from 'react'\n\nexport class Intro extends React.PureComponent {\n  render() {\n    return (\n      <div>\n        <h3>React Checkbox Tree</h3>\n        <p>A react app showcasing a simple checkbox tree component. This project was created\n        using <a href='https://github.com/facebookincubator/create-react-app'>create-react-app</a>.\n        </p>\n      </div>\n    )\n  }\n}","import React from 'react'\nimport 'tachyons/css/tachyons.min.css'\n\nimport { Intro, CheckboxTree } from './components'\nimport github from './assets/github.svg'\n\nexport class App extends React.PureComponent {\n  render() {\n    return (\n      <div className='flex flex-column w-80 mw8 vh-100 center pv4'>\n        <div className='flex flex-auto flex-column'>\n          <Intro />\n          <CheckboxTree />\n        </div>\n        <div className='self-center'>\n          <a href='https://github.com/joelgeorgev/react-checkbox-tree'>\n            <img src={github} alt='GitHub' />\n          </a>\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { App } from './App'\nimport registerServiceWorker from './registerServiceWorker'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}