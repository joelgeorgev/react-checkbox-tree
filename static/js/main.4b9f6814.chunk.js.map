{"version":3,"sources":["utils/getNewState.ts","components/CheckboxTree/CheckboxTree.tsx","utils/normalize.ts","data/loadTree.ts","components/Checkbox/Checkbox.tsx","components/Intro/Intro.tsx","assets/github.svg","App.tsx","fonts/source-sans-pro-v11-latin-regular.woff2","fonts/source-sans-pro-v11-latin-regular.woff","index.tsx"],"names":["toggleNode","node","checked","toggleNodeAndChildren","nodes","id","newNodes","currentNode","childIds","length","forEach","childId","areChildrenChecked","reduce","acc","toggleParent","parentId","undefined","parentNode","shouldToggleParent","getNewState","List","styled","ul","CheckboxTree","useState","setNodes","useEffect","tree","normalizedTree","counter","transform","text","push","childNode","normalize","onToggle","prevNodes","StyledCheckbox","input","Checkbox","type","onChange","map","Intro","href","Main","main","Section","section","Footer","footer","App","src","github","alt","GlobalStyle","createGlobalStyle","woff2","woff","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b9f6814.chunk.js","sourcesContent":["import type { Node, Nodes } from '../types'\n\nconst toggleNode = (node: Node, checked: Node['checked']): Node => ({\n  ...node,\n  checked\n})\n\nconst toggleNodeAndChildren = (\n  nodes: Nodes,\n  id: string,\n  checked: Node['checked']\n): Nodes => {\n  let newNodes = { ...nodes }\n  const currentNode = newNodes[id]\n  const { childIds } = currentNode\n\n  newNodes[id] = toggleNode(currentNode, checked)\n\n  if (childIds.length) {\n    childIds.forEach((childId) => {\n      newNodes = toggleNodeAndChildren(newNodes, childId, checked)\n    })\n  }\n\n  return newNodes\n}\n\nconst areChildrenChecked = (nodes: Nodes, id: string): boolean => {\n  const currentNode = nodes[id]\n  const { checked, childIds } = currentNode\n\n  return childIds.length\n    ? childIds.reduce<boolean>(\n        (acc, childId) => acc && areChildrenChecked(nodes, childId),\n        true\n      )\n    : checked\n}\n\nconst toggleParent = (nodes: Nodes, id: string): Nodes => {\n  const parentId = nodes[id].parentId\n\n  if (parentId === undefined) {\n    return nodes\n  }\n\n  let newNodes = { ...nodes }\n  const parentNode = newNodes[parentId]\n  const shouldToggleParent = areChildrenChecked(newNodes, parentId)\n\n  if (parentNode.checked !== shouldToggleParent) {\n    newNodes[parentId] = toggleNode(parentNode, shouldToggleParent)\n  }\n\n  return toggleParent(newNodes, parentId)\n}\n\nexport const getNewState = (nodes: Nodes, id: string): Nodes => {\n  let newNodes: Nodes\n\n  newNodes = toggleNodeAndChildren(nodes, id, !nodes[id].checked)\n  newNodes = toggleParent(newNodes, id)\n\n  return newNodes\n}\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport { Checkbox } from '..'\nimport { loadTree } from '../../data'\nimport { normalize, getNewState } from '../../utils'\n\ntype Nodes = ReturnType<typeof normalize>\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n`\n\nexport const CheckboxTree = () => {\n  const [nodes, setNodes] = useState<Nodes | null>(null)\n\n  useEffect(() => {\n    const tree = loadTree()\n    setNodes(normalize(tree))\n  }, [])\n\n  const toggleCheckbox = (id: string): void => {\n    setNodes((prevNodes) => getNewState(prevNodes as Nodes, id))\n  }\n\n  return (\n    nodes && (\n      <List>\n        <Checkbox id={'0'} nodes={nodes} onToggle={toggleCheckbox} />\n      </List>\n    )\n  )\n}\n","import type { Tree, Nodes } from '../types'\n\nconst RECURSION_KEY = 'children'\n\nexport const normalize = (tree: Tree): Nodes => {\n  let normalizedTree: Nodes = {}\n  let counter = -1\n\n  const transform = (node: Tree, parentId?: string): void => {\n    counter += 1\n\n    const id = `${counter}`\n    const { text, checked } = node\n\n    normalizedTree[id] = {\n      text,\n      checked,\n      parentId,\n      childIds: []\n    }\n\n    if (parentId) {\n      normalizedTree[parentId].childIds.push(id)\n    }\n\n    if (node[RECURSION_KEY] && node[RECURSION_KEY].length) {\n      node[RECURSION_KEY].forEach((childNode) => {\n        transform(childNode, id)\n      })\n    }\n  }\n\n  transform(tree)\n\n  return normalizedTree\n}\n","import type { Tree } from '../types'\n\nimport tree from './tree.json'\n\nexport const loadTree = (): Tree => tree\n","import { Fragment } from 'react'\nimport styled from 'styled-components'\n\nimport type { Nodes } from '../../types'\n\nconst List = styled.ul`\n  list-style-type: none;\n`\n\nconst StyledCheckbox = styled.input`\n  margin-right: 0.5rem;\n  cursor: pointer;\n`\n\ninterface Props {\n  id: string\n  nodes: Nodes\n  onToggle: (id: string) => void\n}\n\nexport const Checkbox = ({ id, nodes, onToggle }: Props) => {\n  const node = nodes[id]\n  const { text, childIds, checked } = node\n\n  return (\n    <Fragment key={id}>\n      {text && (\n        <li>\n          <label>\n            <StyledCheckbox\n              type='checkbox'\n              checked={checked}\n              onChange={() => onToggle(id)}\n            />\n            {text}\n          </label>\n        </li>\n      )}\n      {childIds.length > 0 && (\n        <li>\n          <List>\n            {childIds.map((childId) => (\n              <Checkbox\n                key={childId}\n                id={childId}\n                nodes={nodes}\n                onToggle={onToggle}\n              />\n            ))}\n          </List>\n        </li>\n      )}\n    </Fragment>\n  )\n}\n","export const Intro = () => (\n  <>\n    <h1>React Checkbox Tree</h1>\n    <p>\n      A react app showcasing a simple checkbox tree component. This project was\n      created using{' '}\n      <a href='https://github.com/facebookincubator/create-react-app'>\n        create-react-app\n      </a>\n      .\n    </p>\n  </>\n)\n","export default __webpack_public_path__ + \"static/media/github.66378707.svg\";","import styled from 'styled-components'\n\nimport { Intro, CheckboxTree } from './components'\n\nimport github from './assets/github.svg'\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  max-width: 64rem;\n  height: 100vh;\n  margin: 0 auto;\n`\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: auto;\n`\n\nconst Footer = styled.footer`\n  align-self: center;\n  margin: 2rem;\n`\n\nexport const App = () => (\n  <Main>\n    <header>\n      <Intro />\n    </header>\n    <Section>\n      <article>\n        <CheckboxTree />\n      </article>\n    </Section>\n    <Footer>\n      <a href='https://github.com/joelgeorgev/react-checkbox-tree'>\n        <img src={github} alt='Go to GitHub repository page' />\n      </a>\n    </Footer>\n  </Main>\n)\n","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.96b15882.woff2\";","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.74ddb2b0.woff\";","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { App } from './App'\n\nimport woff2 from './fonts/source-sans-pro-v11-latin-regular.woff2'\nimport woff from './fonts/source-sans-pro-v11-latin-regular.woff'\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Source Sans Pro', sans-serif;\n    overscroll-behavior-y: none;\n  }\n\n  /* source-sans-pro-regular - latin */\n  @font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    font-display: optional;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'),\n        url(${woff2}) format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n        url(${woff}) format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  }\n`\n\nReactDOM.render(\n  <StrictMode>\n    <GlobalStyle />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}