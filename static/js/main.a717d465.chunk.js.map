{"version":3,"sources":["utils/normalize.ts","utils/getNewState.ts","components/CheckboxTree/CheckboxTree.tsx","components/Checkbox/Checkbox.tsx","components/Intro/Intro.tsx","assets/github.svg","App.tsx","fonts/source-sans-pro-v11-latin-regular.woff2","fonts/source-sans-pro-v11-latin-regular.woff","index.js","registerServiceWorker.js","utils/index.ts"],"names":["normalize","data","normalizedData","counter","transform","node","parentId","id","text","checked","childIds","push","length","forEach","childNode","toggleNode","toggleNodeAndChildren","nodes","newNodes","currentNode","childId","areChildrenChecked","reduce","acc","toggleParent","undefined","parentNode","shouldToggleParent","getNewState","List","styled","ul","CheckboxTree","useState","setNodes","onToggle","prevNodes","StyledCheckbox","input","Checkbox","Fragment","type","onChange","map","Intro","href","Main","main","Section","section","Footer","footer","App","src","github","alt","GlobalStyle","createGlobalStyle","woff2","woff","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.a717d465.chunk.js","sourcesContent":["import { RecursiveData, Nodes } from '.'\n\nconst RECURSION_KEY = 'children'\n\nexport const normalize = (data: RecursiveData): Nodes => {\n  let normalizedData: Nodes = {}\n  let counter = -1\n\n  const transform = (node: RecursiveData, parentId?: string) => {\n    counter += 1\n\n    const id = `${counter}`\n    const { [RECURSION_KEY]: exclude, text = '', checked = false } = node\n\n    normalizedData[id] = {\n      text,\n      checked,\n      parentId,\n      childIds: []\n    }\n\n    if (parentId) {\n      normalizedData[parentId].childIds.push(id)\n    }\n\n    if (node[RECURSION_KEY] && node[RECURSION_KEY].length) {\n      node[RECURSION_KEY].forEach((childNode) => {\n        transform(childNode, id)\n      })\n    }\n  }\n\n  transform(data)\n\n  return normalizedData\n}\n","import { Node, Nodes } from '.'\n\nconst toggleNode = (node: Node, checked: boolean): Node => ({ ...node, checked })\n\nconst toggleNodeAndChildren = (nodes: Nodes, id: string, checked: boolean): Nodes => {\n  let newNodes = { ...nodes }\n  const currentNode = newNodes[id]\n  const { childIds } = currentNode\n\n  newNodes[id] = toggleNode(currentNode, checked)\n\n  if (childIds.length) {\n    childIds.forEach((childId) => {\n      newNodes = toggleNodeAndChildren(newNodes, childId, checked)\n    })\n  }\n\n  return newNodes\n}\n\nconst areChildrenChecked = (nodes: Nodes, id: string): boolean => {\n  const currentNode = nodes[id]\n  const { checked, childIds } = currentNode\n\n  return childIds.length\n    ? childIds.reduce(\n      (acc: boolean, childId: string): boolean => acc && areChildrenChecked(nodes, childId),\n      true\n    )\n    : checked\n}\n\nconst toggleParent = (nodes: Nodes, id: string): Nodes => {\n  const parentId = nodes[id].parentId\n\n  if (parentId === undefined) {\n    return nodes\n  }\n\n  let newNodes = { ...nodes }\n  const parentNode = newNodes[parentId]\n  const shouldToggleParent = areChildrenChecked(newNodes, parentId)\n\n  if (parentNode.checked !== shouldToggleParent) {\n    newNodes[parentId] = toggleNode(parentNode, shouldToggleParent)\n  }\n\n  return toggleParent(newNodes, parentId)\n}\n\nexport const getNewState = (nodes: Nodes, id: string): Nodes => {\n  let newNodes\n\n  newNodes = toggleNodeAndChildren(nodes, id, !nodes[id].checked)\n  newNodes = toggleParent(newNodes, id)\n\n  return newNodes\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Checkbox } from '..'\nimport { normalize, getNewState, RecursiveData } from '../../utils'\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n`\n\ninterface Props {\n  data: RecursiveData\n}\n\nexport const CheckboxTree = ({ data }: Props) => {\n  const [nodes, setNodes] = useState(normalize(data))\n\n  const toggleCheckbox = (id: string) => {\n    setNodes((prevNodes) => getNewState(prevNodes, id))\n  }\n\n  return (\n    <List>\n      <Checkbox id={'0'} nodes={nodes} onToggle={toggleCheckbox} />\n    </List>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Nodes } from '../../utils'\n\nconst List = styled.ul`\n  list-style-type: none;\n`\n\nconst StyledCheckbox = styled.input`\n  margin-right: 0.5rem;\n  cursor: pointer;\n`\n\ninterface Props {\n  id: string;\n  nodes: Nodes;\n  onToggle(id: string): void;\n}\n\nexport const Checkbox = ({ id, nodes, onToggle }: Props) => {\n  const node = nodes[id]\n  const { text, childIds, checked } = node\n\n  const handleChange = () => onToggle(id)\n\n  return (\n    <React.Fragment key={id}>\n      {text && (\n        <li>\n          <label>\n            <StyledCheckbox\n              type='checkbox'\n              checked={checked}\n              onChange={handleChange}\n            />\n            {text}\n          </label>\n        </li>\n      )}\n      {childIds.length ? (\n        <li>\n          <List>\n            {childIds.map((childId) => (\n              <Checkbox\n                key={childId}\n                id={childId}\n                nodes={nodes}\n                onToggle={onToggle}\n              />\n            ))}\n          </List>\n        </li>\n      ) : null}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\n\nexport const Intro = () => (\n  <>\n    <h1>React Checkbox Tree</h1>\n    <p>\n      A react app showcasing a simple checkbox tree component. This project was\n      created using{' '}\n      <a href='https://github.com/facebookincubator/create-react-app'>\n        create-react-app\n      </a>\n      .\n    </p>\n  </>\n)\n","export default __webpack_public_path__ + \"static/media/github.66378707.svg\";","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Intro, CheckboxTree } from './components'\nimport data from './data/data.json'\nimport github from './assets/github.svg'\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  max-width: 64rem;\n  height: 100vh;\n  margin: 0 auto;\n`\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: auto;\n`\n\nconst Footer = styled.footer`\n  align-self: center;\n  margin: 2rem;\n`\n\nexport const App = () => (\n  <Main>\n    <header>\n      <Intro />\n    </header>\n    <Section>\n      <article>\n        <CheckboxTree data={data} />\n      </article>\n    </Section>\n    <Footer>\n      <a href='https://github.com/joelgeorgev/react-checkbox-tree'>\n        <img src={github} alt='Go to GitHub repository page' />\n      </a>\n    </Footer>\n  </Main>\n)\n","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.96b15882.woff2\";","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.74ddb2b0.woff\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { App } from './App'\nimport woff2 from './fonts/source-sans-pro-v11-latin-regular.woff2'\nimport woff from './fonts/source-sans-pro-v11-latin-regular.woff'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Source Sans Pro', sans-serif;\n    overscroll-behavior-y: none;\n  }\n\n  /* source-sans-pro-regular - latin */\n  @font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    font-display: optional;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'),\n        url(${woff2}) format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n        url(${woff}) format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  }\n`\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export * from './normalize'\nexport * from './getNewState'\nexport * from './types'\n"],"sourceRoot":""}